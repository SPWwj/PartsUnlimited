@inherits OwningComponentBase<ShoppingCartService>
@inject ShoppingCartNotificationService Notifications

<div id="shopping-cart-page">
    <section>
        @if (_model == null)
        {
            <h4>Loading cart details...</h4>
        }
        else
        {
            <h2>Review your Cart</h2>
            @if (_model.CartCount > 0)
            {
                <div id="cart-summary">
                    <div class="hidden-xs cart-summary-header">
                        <div class="row">
                            <div class="col-sm-8 col-md-8 no-gutter-md-left no-gutter-sm-left">Product Description</div>
                            <div class="col-sm-2 col-md-2 text-center">Quantity</div>
                            <div class="col-sm-2 col-md-2 text-center">Price</div>
                        </div>
                    </div>

                    @foreach (var item in _model.CartItems)
                    {
                        <div @key="item.CartItemId" id="row-@item.CartItemId" class="cart-item">
                            <div class="row">
                                <div class="col-xs-1 no-gutter-xs-right text-center-xs col-sm-2 col-sm-push-8 text-center-sm">
                                    <div class="item-label item-inventory">@item.Count</div>
                                </div>
                                <div class="col-xs-3 col-sm-3 col-sm-pull-2 col-md-2"><img src="/images/@item.Product.ProductArtUrl" /></div>
                                <div class="col-xs-6 col-sm-2 col-sm-push-5 text-center-sm col-md-push-6">
                                    <div class="visible-xs item-label">@item.Product.Title</div>
                                    <div class="item-price">@item.Product.Price.ToString("C")</div>
                                </div>
                                <div class="visible-xs col-xs-2 text-right no-gutter-xs-left">
                                    <button class="remove-link" @onclick="() => RemoveFromCart(item.CartItemId)">
                                        <img src="/images/remove_icon.png" />
                                    </button>
                                </div>
                                <div class="col-xs-12 col-sm-5 col-sm-pull-4 col-md-6 description">
                                    <div class="hidden-xs">
                                        <strong><a href="@string.Format(_productDetailslinkTemplate, item.ProductId)">@item.Product.Title</a></strong>
                                    </div>
                                    <div class="visible-xs item-label">Description</div>
                                    <p class="text-content">@item.Product.Description</p>
                                </div>
                                <div class="hidden-xs remove-cart-item">
                                    <button @onclick="() => RemoveFromCart(item.CartItemId)" class="remove-link btn">
                                        Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                    }

                    <OrderCostSummaryWidget Model="_model.OrderCostSummary" />
                    <div class="row">
                        <div class="col-xs-12 col-sm-6 col-sm-offset-6 col-md-4 col-md-offset-8">
                            <div>
                                <a href="@Checkout" class="btn pull-right checkout">Checkout</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (_model.CartCount <= 0)
            {
                <h4 id="empty-cart">
                    Your cart is currently empty
                </h4>
            }
        }
    </section>
</div>
@code {
    private ShoppingCartModel _model;

    [Parameter] public ShoppingCartModel Model { get; set; }

    [Parameter] public string Checkout { get; set; }

    [Parameter] public string DetailsTemplate { get; set; }

    [Parameter] public string ShoppingCartId { get; set; }

    private string _productDetailslinkTemplate = null;

    protected override async Task OnInitializedAsync()
    {
        _productDetailslinkTemplate = DetailsTemplate.Replace("$0", "{0}");
        if (Model != null)
        {
            _model = Model;
        }
        else
        {
            _model = await Service.GetShoppingCartDetails(ShoppingCartId);
        }
    }

    public async Task RemoveFromCart(int id)
    {
        await Service.RemoveFromCart(ShoppingCartId, id);
        _model = await Service.GetShoppingCartDetails(ShoppingCartId);
        await Notifications.OnItemRemoved();
    }
}
